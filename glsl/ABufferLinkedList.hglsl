/**
 * Fast Single-pass A-Buffer using OpenGL 4.0 V2.0
 * Copyright Cyril Crassin, July 2010
 *
 * Modified by Sebastian Weiss, 2017
**/
#ifndef ABUFFERLINKEDLIST_HGLSL
#define ABUFFERLINKEDLIST_HGLSL

//Uniforms changed from the C++ side
struct AbufferParameters
{
    int screenWidth;
    int screenHeight;
    vec4 backgroundColor;
    int sharedPoolSize;
};
uniform AbufferParameters AbufferParams;

//Macros (maybe) changed from the C++ side

//max depth of the chain, all others are discarded during the final rendering
#define ABUFFER_SIZE 16

#define ABUFFER_PAGE_SIZE 4

#define ABUFFER_USE_TEXTURES 1
#define ABUFFER_SHAREDPOOL_USE_TEXTURES 1

#define ABUFFER_RESOLVE_USE_SORTING	1
#define ABUFFER_RESOLVE_ALPHA_CORRECTION 0
#define ABUFFER_RESOLVE_GELLY 0

#define ABUFFER_DISPNUMFRAGMENTS 0

#if ABUFFER_USE_TEXTURES
//A-Buffer fragments storage
coherent uniform layout(size1x32) uimage2D abufferPageIdxImg;
//A-Buffer fragment counter
coherent uniform layout(size1x32) uimage2D abufferFragCountImg;
//per-pixel semaphore
coherent uniform layout(size1x32) uimage2D abufferSemaphoreImg;
#else
#error Buffer access not supported
//coherent uniform uint *d_abufferPageIdx;
//coherent uniform uint *d_abufferFragCount;
//coherent uniform uint *d_semaphore;
#endif

#if ABUFFER_SHAREDPOOL_USE_TEXTURES
//A-Buffer shared fragment pages buffer
coherent uniform layout(size4x32) imageBuffer sharedPageListImg;
//A-Buffer shared link list
coherent uniform layout(size1x32) uimageBuffer sharedLinkListImg;
#else
#error Buffer access not supported
//coherent uniform uint *d_sharedLinkList;
//coherent uniform vec4 *d_sharedPageList;
#endif


//Access functions

#if ABUFFER_USE_TEXTURES

bool semaphoreAcquire(ivec2 coords){
	return imageAtomicExchange(abufferSemaphoreImg, coords, 1U)==0U;
}
void semaphoreRelease(ivec2 coords){
	imageAtomicExchange(abufferSemaphoreImg, coords, 0U);
}
bool getSemaphore(ivec2 coords){
	return imageLoad(abufferSemaphoreImg, coords).x==0U;
}
void setSemaphore(ivec2 coords, bool val){
	imageStore(abufferSemaphoreImg, coords, uvec4(val ? 1U : 0U, 0U, 0U, 0U));
}

uint getPixelCurrentPage(ivec2 coords){
	return imageLoad(abufferPageIdxImg, coords).x;
}
void setPixelCurrentPage(ivec2 coords, uint newpageidx){
	imageStore(abufferPageIdxImg, coords, uvec4(newpageidx, 0U, 0U, 0U) );
}

uint getPixelFragCounter(ivec2 coords){
	return imageLoad(abufferFragCountImg, coords).x;
}
void setPixelFragCounter(ivec2 coords, uint val){
	imageStore(abufferFragCountImg, coords, uvec4(val, 0U, 0U, 0U) );
}
uint pixelFragCounterAtomicAdd(ivec2 coords, uint val){
	return imageAtomicAdd(abufferFragCountImg, coords, val);
}

#else

bool semaphoreAcquire(ivec2 coords){
	return atomicExchange(d_semaphore+coords.x+coords.y*AbufferParams.screenWidth, 0U) != 0U;
}
void semaphoreRelease(ivec2 coords){
	atomicExchange(d_semaphore+coords.x+coords.y*AbufferParams.ScreenWidth, 1U);
}
bool getSemaphore(ivec2 coords){
	return d_semaphore[coords.x+coords.y*AbufferParams.ScreenWidth]==0U;
}
void setSemaphore(ivec2 coords, bool val){
	d_semaphore[coords.x+coords.y*AbufferParams.ScreenWidth]=val ? 0U : 1U;
}

uint getPixelCurrentPage(ivec2 coords){
	return d_abufferPageIdx[coords.x+coords.y*AbufferParams.ScreenWidth];
}
void setPixelCurrentPage(ivec2 coords, uint newpageidx){
	d_abufferPageIdx[coords.x+coords.y*AbufferParams.ScreenWidth]=newpageidx;
}

uint getPixelFragCounter(ivec2 coords){
	return d_abufferFragCount[coords.x+coords.y*AbufferParams.ScreenWidth];
}
void setPixelFragCounter(ivec2 coords, uint val){
	d_abufferFragCount[coords.x+coords.y*AbufferParams.ScreenWidth]=val;
}
uint pixelFragCounterAtomicAdd(ivec2 coords, uint val){
	return atomicAdd(d_abufferFragCount+coords.x+coords.y*AbufferParams.ScreenWidth, val);
}

#endif


#if ABUFFER_SHAREDPOOL_USE_TEXTURES
uint sharedPoolGetLink(uint pageNum){
	return imageLoad(sharedLinkListImg, int(pageNum) ).x;
}
void sharedPoolSetLink(uint pageNum, uint pointer){
	imageStore(sharedLinkListImg, int(pageNum), uvec4(pointer, 0U, 0U, 0U) );
}

vec4 sharedPoolGetValue(uint index){
	return imageLoad(sharedPageListImg, int(index));
}
void sharedPoolSetValue(uint index, vec4 val){
	imageStore(sharedPageListImg, int(index), val);
}
#else
uint sharedPoolGetLink(uint pageNum){
	return d_sharedLinkList[(int)pageNum];
}
void sharedPoolSetLink(uint pageIdx, uint pointer){
	d_sharedLinkList[(int)pageIdx]=pointer;
}

vec4 sharedPoolGetValue(uint index){
	return d_sharedPageList[(int)index];
}
void sharedPoolSetValue(uint index, vec4 val){
	d_sharedPageList[(int)index]=val;
}
#endif


// Rendering function


#endif	//ABUFFERLINKEDLIST_HGLSL